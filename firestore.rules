rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {

// --- HELPER FUNCTIONS ---
// Get the user's role from their user doc
function getUserRole(userId) {
  return get(/databases/$(database)/documents/users/$(userId)).data.role;
}

// Check if the request is from an admin
function isAdmin() {
  return request.auth != null && getUserRole(request.auth.uid) == 'admin';
}

// Check if the request is from the user themselves
function isSelf(userId) {
  return request.auth != null && request.auth.uid == userId;
}

// --- COLLECTION RULES ---

// Products: Everyone can read, only admins can write
match /products/{productId} {
  allow get, list: if true;
  allow write: if isAdmin();
}

// Users:
// - You can read/update your own document
// - Admins can read/update *any* user document
match /users/{userId} {
  allow create: if request.auth != null; // Allow creating a new user doc on signup
  allow read, update: if isAdmin() || isSelf(userId);
  // No delete, for safety
}

// Categories: Everyone can read, only admins can write
match /categories/{categoryId} {
  allow get, list: if true;
  allow write: if isAdmin();
}

// Orders:
// - Users can create their own orders
// - Users can read their own orders
// - Admins can read/write all orders
match /orders/{document=**} {
  allow read, update: if (resource.data.userId == request.auth.uid) || isAdmin();
  allow create: if (request.resource.data.userId == request.auth.uid) || isAdmin();
}

// --- NEW COUNTERS RULE ---
// Only authenticated users can read/write the userCounter.
// This is secure because the logic is in a transaction.
// A user must be logged in (which they are, just after signup)
// to call this transaction.
match /counters/userCounter {
  allow read, write: if request.auth != null;
}


}
}